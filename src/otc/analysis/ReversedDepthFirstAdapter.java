/* This file was generated by SableCC (http://www.sablecc.org/). */

package otc.analysis;

import java.util.*;
import otc.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        outAProgram(node);
    }

    public void inAHeader(AHeader node)
    {
        defaultIn(node);
    }

    public void outAHeader(AHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeader(AHeader node)
    {
        inAHeader(node);
        {
            List<PDependencies> copy = new ArrayList<PDependencies>(node.getDependencies());
            Collections.reverse(copy);
            for(PDependencies e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTDocComment() != null)
        {
            node.getTDocComment().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getTScriptName() != null)
        {
            node.getTScriptName().apply(this);
        }
        if(node.getTScript() != null)
        {
            node.getTScript().apply(this);
        }
        outAHeader(node);
    }

    public void inAParameters(AParameters node)
    {
        defaultIn(node);
    }

    public void outAParameters(AParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameters(AParameters node)
    {
        inAParameters(node);
        if(node.getParametersTail() != null)
        {
            node.getParametersTail().apply(this);
        }
        if(node.getTIdentifier() != null)
        {
            node.getTIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAParameters(node);
    }

    public void inAParametersTail(AParametersTail node)
    {
        defaultIn(node);
    }

    public void outAParametersTail(AParametersTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametersTail(AParametersTail node)
    {
        inAParametersTail(node);
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAParametersTail(node);
    }

    public void inAIdType(AIdType node)
    {
        defaultIn(node);
    }

    public void outAIdType(AIdType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdType(AIdType node)
    {
        inAIdType(node);
        if(node.getTIdType() != null)
        {
            node.getTIdType().apply(this);
        }
        outAIdType(node);
    }

    public void inASexType(ASexType node)
    {
        defaultIn(node);
    }

    public void outASexType(ASexType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASexType(ASexType node)
    {
        inASexType(node);
        if(node.getTSexType() != null)
        {
            node.getTSexType().apply(this);
        }
        outASexType(node);
    }

    public void inABirthyearType(ABirthyearType node)
    {
        defaultIn(node);
    }

    public void outABirthyearType(ABirthyearType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABirthyearType(ABirthyearType node)
    {
        inABirthyearType(node);
        if(node.getTBirthyearType() != null)
        {
            node.getTBirthyearType().apply(this);
        }
        outABirthyearType(node);
    }

    public void inADiagnosisType(ADiagnosisType node)
    {
        defaultIn(node);
    }

    public void outADiagnosisType(ADiagnosisType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiagnosisType(ADiagnosisType node)
    {
        inADiagnosisType(node);
        if(node.getTDiagnosisType() != null)
        {
            node.getTDiagnosisType().apply(this);
        }
        outADiagnosisType(node);
    }

    public void inAPostalcodeType(APostalcodeType node)
    {
        defaultIn(node);
    }

    public void outAPostalcodeType(APostalcodeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostalcodeType(APostalcodeType node)
    {
        inAPostalcodeType(node);
        if(node.getTPostalcodeType() != null)
        {
            node.getTPostalcodeType().apply(this);
        }
        outAPostalcodeType(node);
    }

    public void inAYearsType(AYearsType node)
    {
        defaultIn(node);
    }

    public void outAYearsType(AYearsType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAYearsType(AYearsType node)
    {
        inAYearsType(node);
        if(node.getTYearsType() != null)
        {
            node.getTYearsType().apply(this);
        }
        outAYearsType(node);
    }

    public void inAMonthsType(AMonthsType node)
    {
        defaultIn(node);
    }

    public void outAMonthsType(AMonthsType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMonthsType(AMonthsType node)
    {
        inAMonthsType(node);
        if(node.getTMonthsType() != null)
        {
            node.getTMonthsType().apply(this);
        }
        outAMonthsType(node);
    }

    public void inADaysType(ADaysType node)
    {
        defaultIn(node);
    }

    public void outADaysType(ADaysType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADaysType(ADaysType node)
    {
        inADaysType(node);
        if(node.getTDaysType() != null)
        {
            node.getTDaysType().apply(this);
        }
        outADaysType(node);
    }

    public void inADateType(ADateType node)
    {
        defaultIn(node);
    }

    public void outADateType(ADateType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADateType(ADateType node)
    {
        inADateType(node);
        if(node.getTDateType() != null)
        {
            node.getTDateType().apply(this);
        }
        outADateType(node);
    }

    public void inAEventType(AEventType node)
    {
        defaultIn(node);
    }

    public void outAEventType(AEventType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventType(AEventType node)
    {
        inAEventType(node);
        if(node.getTEventType() != null)
        {
            node.getTEventType().apply(this);
        }
        outAEventType(node);
    }

    public void inASequenceType(ASequenceType node)
    {
        defaultIn(node);
    }

    public void outASequenceType(ASequenceType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceType(ASequenceType node)
    {
        inASequenceType(node);
        if(node.getTSequenceType() != null)
        {
            node.getTSequenceType().apply(this);
        }
        outASequenceType(node);
    }

    public void inADependencies(ADependencies node)
    {
        defaultIn(node);
    }

    public void outADependencies(ADependencies node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADependencies(ADependencies node)
    {
        inADependencies(node);
        if(node.getDependenciesList() != null)
        {
            node.getDependenciesList().apply(this);
        }
        if(node.getTUse() != null)
        {
            node.getTUse().apply(this);
        }
        outADependencies(node);
    }

    public void inADependenciesList(ADependenciesList node)
    {
        defaultIn(node);
    }

    public void outADependenciesList(ADependenciesList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADependenciesList(ADependenciesList node)
    {
        inADependenciesList(node);
        if(node.getDependenciesTail() != null)
        {
            node.getDependenciesTail().apply(this);
        }
        if(node.getTGroupFile() != null)
        {
            node.getTGroupFile().apply(this);
        }
        outADependenciesList(node);
    }

    public void inADependenciesTail(ADependenciesTail node)
    {
        defaultIn(node);
    }

    public void outADependenciesTail(ADependenciesTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADependenciesTail(ADependenciesTail node)
    {
        inADependenciesTail(node);
        if(node.getDependenciesList() != null)
        {
            node.getDependenciesList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outADependenciesTail(node);
    }
}
