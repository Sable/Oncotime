/* This file was generated by SableCC (http://www.sablecc.org/). */

package otc.node;

import otc.analysis.*;

@SuppressWarnings("nls")
public final class ADependencies extends PDependencies
{
    private TTUse _tUse_;
    private PDependenciesList _dependenciesList_;

    public ADependencies()
    {
        // Constructor
    }

    public ADependencies(
        @SuppressWarnings("hiding") TTUse _tUse_,
        @SuppressWarnings("hiding") PDependenciesList _dependenciesList_)
    {
        // Constructor
        setTUse(_tUse_);

        setDependenciesList(_dependenciesList_);

    }

    @Override
    public Object clone()
    {
        return new ADependencies(
            cloneNode(this._tUse_),
            cloneNode(this._dependenciesList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADependencies(this);
    }

    public TTUse getTUse()
    {
        return this._tUse_;
    }

    public void setTUse(TTUse node)
    {
        if(this._tUse_ != null)
        {
            this._tUse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tUse_ = node;
    }

    public PDependenciesList getDependenciesList()
    {
        return this._dependenciesList_;
    }

    public void setDependenciesList(PDependenciesList node)
    {
        if(this._dependenciesList_ != null)
        {
            this._dependenciesList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dependenciesList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tUse_)
            + toString(this._dependenciesList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tUse_ == child)
        {
            this._tUse_ = null;
            return;
        }

        if(this._dependenciesList_ == child)
        {
            this._dependenciesList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tUse_ == oldChild)
        {
            setTUse((TTUse) newChild);
            return;
        }

        if(this._dependenciesList_ == oldChild)
        {
            setDependenciesList((PDependenciesList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
