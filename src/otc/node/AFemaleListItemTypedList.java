/* This file was generated by SableCC (http://www.sablecc.org/). */

package otc.node;

import otc.analysis.*;

@SuppressWarnings("nls")
public final class AFemaleListItemTypedList extends PTypedList
{
    private TTFemale _tFemale_;
    private PTypedList _typedList_;

    public AFemaleListItemTypedList()
    {
        // Constructor
    }

    public AFemaleListItemTypedList(
        @SuppressWarnings("hiding") TTFemale _tFemale_,
        @SuppressWarnings("hiding") PTypedList _typedList_)
    {
        // Constructor
        setTFemale(_tFemale_);

        setTypedList(_typedList_);

    }

    @Override
    public Object clone()
    {
        return new AFemaleListItemTypedList(
            cloneNode(this._tFemale_),
            cloneNode(this._typedList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFemaleListItemTypedList(this);
    }

    public TTFemale getTFemale()
    {
        return this._tFemale_;
    }

    public void setTFemale(TTFemale node)
    {
        if(this._tFemale_ != null)
        {
            this._tFemale_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tFemale_ = node;
    }

    public PTypedList getTypedList()
    {
        return this._typedList_;
    }

    public void setTypedList(PTypedList node)
    {
        if(this._typedList_ != null)
        {
            this._typedList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typedList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tFemale_)
            + toString(this._typedList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tFemale_ == child)
        {
            this._tFemale_ = null;
            return;
        }

        if(this._typedList_ == child)
        {
            this._typedList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tFemale_ == oldChild)
        {
            setTFemale((TTFemale) newChild);
            return;
        }

        if(this._typedList_ == oldChild)
        {
            setTypedList((PTypedList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
