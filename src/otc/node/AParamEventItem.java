/* This file was generated by SableCC (http://www.sablecc.org/). */

package otc.node;

import java.util.*;
import otc.analysis.*;

@SuppressWarnings("nls")
public final class AParamEventItem extends PEventItem
{
    private TTIdentifier _tIdentifier_;
    private final LinkedList<TTIdentifier> _eventParamList_ = new LinkedList<TTIdentifier>();

    public AParamEventItem()
    {
        // Constructor
    }

    public AParamEventItem(
        @SuppressWarnings("hiding") TTIdentifier _tIdentifier_,
        @SuppressWarnings("hiding") List<TTIdentifier> _eventParamList_)
    {
        // Constructor
        setTIdentifier(_tIdentifier_);

        setEventParamList(_eventParamList_);

    }

    @Override
    public Object clone()
    {
        return new AParamEventItem(
            cloneNode(this._tIdentifier_),
            cloneList(this._eventParamList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParamEventItem(this);
    }

    public TTIdentifier getTIdentifier()
    {
        return this._tIdentifier_;
    }

    public void setTIdentifier(TTIdentifier node)
    {
        if(this._tIdentifier_ != null)
        {
            this._tIdentifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tIdentifier_ = node;
    }

    public LinkedList<TTIdentifier> getEventParamList()
    {
        return this._eventParamList_;
    }

    public void setEventParamList(List<TTIdentifier> list)
    {
        this._eventParamList_.clear();
        this._eventParamList_.addAll(list);
        for(TTIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tIdentifier_)
            + toString(this._eventParamList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tIdentifier_ == child)
        {
            this._tIdentifier_ = null;
            return;
        }

        if(this._eventParamList_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tIdentifier_ == oldChild)
        {
            setTIdentifier((TTIdentifier) newChild);
            return;
        }

        for(ListIterator<TTIdentifier> i = this._eventParamList_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TTIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
