/* This file was generated by SableCC (http://www.sablecc.org/). */

package otc.node;

import otc.analysis.*;

@SuppressWarnings("nls")
public final class AExpandableListItemTypedList extends PTypedList
{
    private TLAngle _lAngle_;
    private TTIdentifier _tIdentifier_;
    private TRAngle _rAngle_;
    private PTypedListTail _typedListTail_;

    public AExpandableListItemTypedList()
    {
        // Constructor
    }

    public AExpandableListItemTypedList(
        @SuppressWarnings("hiding") TLAngle _lAngle_,
        @SuppressWarnings("hiding") TTIdentifier _tIdentifier_,
        @SuppressWarnings("hiding") TRAngle _rAngle_,
        @SuppressWarnings("hiding") PTypedListTail _typedListTail_)
    {
        // Constructor
        setLAngle(_lAngle_);

        setTIdentifier(_tIdentifier_);

        setRAngle(_rAngle_);

        setTypedListTail(_typedListTail_);

    }

    @Override
    public Object clone()
    {
        return new AExpandableListItemTypedList(
            cloneNode(this._lAngle_),
            cloneNode(this._tIdentifier_),
            cloneNode(this._rAngle_),
            cloneNode(this._typedListTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpandableListItemTypedList(this);
    }

    public TLAngle getLAngle()
    {
        return this._lAngle_;
    }

    public void setLAngle(TLAngle node)
    {
        if(this._lAngle_ != null)
        {
            this._lAngle_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lAngle_ = node;
    }

    public TTIdentifier getTIdentifier()
    {
        return this._tIdentifier_;
    }

    public void setTIdentifier(TTIdentifier node)
    {
        if(this._tIdentifier_ != null)
        {
            this._tIdentifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tIdentifier_ = node;
    }

    public TRAngle getRAngle()
    {
        return this._rAngle_;
    }

    public void setRAngle(TRAngle node)
    {
        if(this._rAngle_ != null)
        {
            this._rAngle_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rAngle_ = node;
    }

    public PTypedListTail getTypedListTail()
    {
        return this._typedListTail_;
    }

    public void setTypedListTail(PTypedListTail node)
    {
        if(this._typedListTail_ != null)
        {
            this._typedListTail_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typedListTail_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lAngle_)
            + toString(this._tIdentifier_)
            + toString(this._rAngle_)
            + toString(this._typedListTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lAngle_ == child)
        {
            this._lAngle_ = null;
            return;
        }

        if(this._tIdentifier_ == child)
        {
            this._tIdentifier_ = null;
            return;
        }

        if(this._rAngle_ == child)
        {
            this._rAngle_ = null;
            return;
        }

        if(this._typedListTail_ == child)
        {
            this._typedListTail_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lAngle_ == oldChild)
        {
            setLAngle((TLAngle) newChild);
            return;
        }

        if(this._tIdentifier_ == oldChild)
        {
            setTIdentifier((TTIdentifier) newChild);
            return;
        }

        if(this._rAngle_ == oldChild)
        {
            setRAngle((TRAngle) newChild);
            return;
        }

        if(this._typedListTail_ == oldChild)
        {
            setTypedListTail((PTypedListTail) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
