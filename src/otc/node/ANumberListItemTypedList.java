/* This file was generated by SableCC (http://www.sablecc.org/). */

package otc.node;

import otc.analysis.*;

@SuppressWarnings("nls")
public final class ANumberListItemTypedList extends PTypedList
{
    private TTNumber _tNumber_;
    private PTypedList _typedList_;

    public ANumberListItemTypedList()
    {
        // Constructor
    }

    public ANumberListItemTypedList(
        @SuppressWarnings("hiding") TTNumber _tNumber_,
        @SuppressWarnings("hiding") PTypedList _typedList_)
    {
        // Constructor
        setTNumber(_tNumber_);

        setTypedList(_typedList_);

    }

    @Override
    public Object clone()
    {
        return new ANumberListItemTypedList(
            cloneNode(this._tNumber_),
            cloneNode(this._typedList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANumberListItemTypedList(this);
    }

    public TTNumber getTNumber()
    {
        return this._tNumber_;
    }

    public void setTNumber(TTNumber node)
    {
        if(this._tNumber_ != null)
        {
            this._tNumber_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tNumber_ = node;
    }

    public PTypedList getTypedList()
    {
        return this._typedList_;
    }

    public void setTypedList(PTypedList node)
    {
        if(this._typedList_ != null)
        {
            this._typedList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typedList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tNumber_)
            + toString(this._typedList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tNumber_ == child)
        {
            this._tNumber_ = null;
            return;
        }

        if(this._typedList_ == child)
        {
            this._typedList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tNumber_ == oldChild)
        {
            setTNumber((TTNumber) newChild);
            return;
        }

        if(this._typedList_ == oldChild)
        {
            setTypedList((PTypedList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
