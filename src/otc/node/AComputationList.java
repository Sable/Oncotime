/* This file was generated by SableCC (http://www.sablecc.org/). */

package otc.node;

import java.util.*;
import otc.analysis.*;

@SuppressWarnings("nls")
public final class AComputationList extends PComputationList
{
    private final LinkedList<PComputation> _computation_ = new LinkedList<PComputation>();

    public AComputationList()
    {
        // Constructor
    }

    public AComputationList(
        @SuppressWarnings("hiding") List<PComputation> _computation_)
    {
        // Constructor
        setComputation(_computation_);

    }

    @Override
    public Object clone()
    {
        return new AComputationList(
            cloneList(this._computation_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComputationList(this);
    }

    public LinkedList<PComputation> getComputation()
    {
        return this._computation_;
    }

    public void setComputation(List<PComputation> list)
    {
        this._computation_.clear();
        this._computation_.addAll(list);
        for(PComputation e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._computation_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._computation_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PComputation> i = this._computation_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComputation) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
