/* This file was generated by SableCC (http://www.sablecc.org/). */

package otc.node;

import otc.analysis.*;

@SuppressWarnings("nls")
public final class ATimeListItemTypedList extends PTypedList
{
    private TTTime _tTime_;
    private PTypedListTail _typedListTail_;

    public ATimeListItemTypedList()
    {
        // Constructor
    }

    public ATimeListItemTypedList(
        @SuppressWarnings("hiding") TTTime _tTime_,
        @SuppressWarnings("hiding") PTypedListTail _typedListTail_)
    {
        // Constructor
        setTTime(_tTime_);

        setTypedListTail(_typedListTail_);

    }

    @Override
    public Object clone()
    {
        return new ATimeListItemTypedList(
            cloneNode(this._tTime_),
            cloneNode(this._typedListTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATimeListItemTypedList(this);
    }

    public TTTime getTTime()
    {
        return this._tTime_;
    }

    public void setTTime(TTTime node)
    {
        if(this._tTime_ != null)
        {
            this._tTime_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tTime_ = node;
    }

    public PTypedListTail getTypedListTail()
    {
        return this._typedListTail_;
    }

    public void setTypedListTail(PTypedListTail node)
    {
        if(this._typedListTail_ != null)
        {
            this._typedListTail_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typedListTail_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tTime_)
            + toString(this._typedListTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tTime_ == child)
        {
            this._tTime_ = null;
            return;
        }

        if(this._typedListTail_ == child)
        {
            this._typedListTail_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tTime_ == oldChild)
        {
            setTTime((TTTime) newChild);
            return;
        }

        if(this._typedListTail_ == oldChild)
        {
            setTypedListTail((PTypedListTail) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
