/* This file was generated by SableCC (http://www.sablecc.org/). */

package otc.node;

import otc.analysis.*;

@SuppressWarnings("nls")
public final class AIdType extends PType
{
    private TTIdType _tIdType_;

    public AIdType()
    {
        // Constructor
    }

    public AIdType(
        @SuppressWarnings("hiding") TTIdType _tIdType_)
    {
        // Constructor
        setTIdType(_tIdType_);

    }

    @Override
    public Object clone()
    {
        return new AIdType(
            cloneNode(this._tIdType_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIdType(this);
    }

    public TTIdType getTIdType()
    {
        return this._tIdType_;
    }

    public void setTIdType(TTIdType node)
    {
        if(this._tIdType_ != null)
        {
            this._tIdType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tIdType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tIdType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tIdType_ == child)
        {
            this._tIdType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tIdType_ == oldChild)
        {
            setTIdType((TTIdType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
