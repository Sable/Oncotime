/* This file was generated by SableCC (http://www.sablecc.org/). */

package otc.parser;

import otc.lexer.*;
import otc.node.*;
import otc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAheader1Header */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AAheader2Header */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AAheader3Header */
		    {
			ArrayList list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce AAheader4Header */
		    {
			ArrayList list = new4();
			push(goTo(1), list, false);
		    }
		    break;
                    case 5: /* reduce AAparameters1Parameters */
		    {
			ArrayList list = new5();
			push(goTo(2), list, false);
		    }
		    break;
                    case 6: /* reduce AAparameters2Parameters */
		    {
			ArrayList list = new6();
			push(goTo(2), list, false);
		    }
		    break;
                    case 7: /* reduce AParametersTail */
		    {
			ArrayList list = new7();
			push(goTo(3), list, false);
		    }
		    break;
                    case 8: /* reduce AIdType */
		    {
			ArrayList list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce ASexType */
		    {
			ArrayList list = new9();
			push(goTo(4), list, false);
		    }
		    break;
                    case 10: /* reduce ABirthyearType */
		    {
			ArrayList list = new10();
			push(goTo(4), list, false);
		    }
		    break;
                    case 11: /* reduce ADiagnosisType */
		    {
			ArrayList list = new11();
			push(goTo(4), list, false);
		    }
		    break;
                    case 12: /* reduce APostalcodeType */
		    {
			ArrayList list = new12();
			push(goTo(4), list, false);
		    }
		    break;
                    case 13: /* reduce AYearsType */
		    {
			ArrayList list = new13();
			push(goTo(4), list, false);
		    }
		    break;
                    case 14: /* reduce AMonthsType */
		    {
			ArrayList list = new14();
			push(goTo(4), list, false);
		    }
		    break;
                    case 15: /* reduce ADaysType */
		    {
			ArrayList list = new15();
			push(goTo(4), list, false);
		    }
		    break;
                    case 16: /* reduce ADateType */
		    {
			ArrayList list = new16();
			push(goTo(4), list, false);
		    }
		    break;
                    case 17: /* reduce AEventType */
		    {
			ArrayList list = new17();
			push(goTo(4), list, false);
		    }
		    break;
                    case 18: /* reduce ASequenceType */
		    {
			ArrayList list = new18();
			push(goTo(4), list, false);
		    }
		    break;
                    case 19: /* reduce ADependencies */
		    {
			ArrayList list = new19();
			push(goTo(5), list, false);
		    }
		    break;
                    case 20: /* reduce AAdependencieslist1DependenciesList */
		    {
			ArrayList list = new20();
			push(goTo(6), list, false);
		    }
		    break;
                    case 21: /* reduce AAdependencieslist2DependenciesList */
		    {
			ArrayList list = new21();
			push(goTo(6), list, false);
		    }
		    break;
                    case 22: /* reduce ADependenciesTail */
		    {
			ArrayList list = new22();
			push(goTo(7), list, false);
		    }
		    break;
                    case 23: /* reduce ATerminal$Dependencies */
		    {
			ArrayList list = new23();
			push(goTo(8), list, true);
		    }
		    break;
                    case 24: /* reduce ANonTerminal$Dependencies */
		    {
			ArrayList list = new24();
			push(goTo(8), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PHeader pheaderNode2;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pheaderNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAheader1Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TTScript ttscriptNode2;
        TTScriptName ttscriptnameNode3;
        TLParen tlparenNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRParen trparenNode6;
        TTDocComment ttdoccommentNode7;
        LinkedList listNode8 = new LinkedList();
        ttscriptNode2 = (TTScript)nodeArrayList1.get(0);
        ttscriptnameNode3 = (TTScriptName)nodeArrayList2.get(0);
        tlparenNode4 = (TLParen)nodeArrayList3.get(0);
        trparenNode6 = (TRParen)nodeArrayList4.get(0);
        ttdoccommentNode7 = (TTDocComment)nodeArrayList5.get(0);
        {
            // Block
        }

        pheaderNode1 = new AHeader(ttscriptNode2, ttscriptnameNode3, tlparenNode4, null, trparenNode6, ttdoccommentNode7, listNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAheader2Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TTScript ttscriptNode2;
        TTScriptName ttscriptnameNode3;
        TLParen tlparenNode4;
        PParameters pparametersNode5;
        TRParen trparenNode6;
        TTDocComment ttdoccommentNode7;
        LinkedList listNode8 = new LinkedList();
        ttscriptNode2 = (TTScript)nodeArrayList1.get(0);
        ttscriptnameNode3 = (TTScriptName)nodeArrayList2.get(0);
        tlparenNode4 = (TLParen)nodeArrayList3.get(0);
        pparametersNode5 = (PParameters)nodeArrayList4.get(0);
        trparenNode6 = (TRParen)nodeArrayList5.get(0);
        ttdoccommentNode7 = (TTDocComment)nodeArrayList6.get(0);
        {
            // Block
        }

        pheaderNode1 = new AHeader(ttscriptNode2, ttscriptnameNode3, tlparenNode4, pparametersNode5, trparenNode6, ttdoccommentNode7, listNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAheader3Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TTScript ttscriptNode2;
        TTScriptName ttscriptnameNode3;
        TLParen tlparenNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRParen trparenNode6;
        TTDocComment ttdoccommentNode7;
        LinkedList listNode9 = new LinkedList();
        ttscriptNode2 = (TTScript)nodeArrayList1.get(0);
        ttscriptnameNode3 = (TTScriptName)nodeArrayList2.get(0);
        tlparenNode4 = (TLParen)nodeArrayList3.get(0);
        trparenNode6 = (TRParen)nodeArrayList4.get(0);
        ttdoccommentNode7 = (TTDocComment)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pheaderNode1 = new AHeader(ttscriptNode2, ttscriptnameNode3, tlparenNode4, null, trparenNode6, ttdoccommentNode7, listNode9);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAheader4Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TTScript ttscriptNode2;
        TTScriptName ttscriptnameNode3;
        TLParen tlparenNode4;
        PParameters pparametersNode5;
        TRParen trparenNode6;
        TTDocComment ttdoccommentNode7;
        LinkedList listNode9 = new LinkedList();
        ttscriptNode2 = (TTScript)nodeArrayList1.get(0);
        ttscriptnameNode3 = (TTScriptName)nodeArrayList2.get(0);
        tlparenNode4 = (TLParen)nodeArrayList3.get(0);
        pparametersNode5 = (PParameters)nodeArrayList4.get(0);
        trparenNode6 = (TRParen)nodeArrayList5.get(0);
        ttdoccommentNode7 = (TTDocComment)nodeArrayList6.get(0);
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pheaderNode1 = new AHeader(ttscriptNode2, ttscriptnameNode3, tlparenNode4, pparametersNode5, trparenNode6, ttdoccommentNode7, listNode9);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAparameters1Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PType ptypeNode2;
        TTIdentifier ttidentifierNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        ttidentifierNode3 = (TTIdentifier)nodeArrayList2.get(0);

        pparametersNode1 = new AParameters(ptypeNode2, ttidentifierNode3, null);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAparameters2Parameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PType ptypeNode2;
        TTIdentifier ttidentifierNode3;
        PParametersTail pparameterstailNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        ttidentifierNode3 = (TTIdentifier)nodeArrayList2.get(0);
        pparameterstailNode4 = (PParametersTail)nodeArrayList3.get(0);

        pparametersNode1 = new AParameters(ptypeNode2, ttidentifierNode3, pparameterstailNode4);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AParametersTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParametersTail pparameterstailNode1;
        {
            // Block
        TComma tcommaNode2;
        PParameters pparametersNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pparametersNode3 = (PParameters)nodeArrayList2.get(0);

        pparameterstailNode1 = new AParametersTail(tcommaNode2, pparametersNode3);
        }
	nodeList.add(pparameterstailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTIdType ttidtypeNode2;
        ttidtypeNode2 = (TTIdType)nodeArrayList1.get(0);

        ptypeNode1 = new AIdType(ttidtypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ASexType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTSexType ttsextypeNode2;
        ttsextypeNode2 = (TTSexType)nodeArrayList1.get(0);

        ptypeNode1 = new ASexType(ttsextypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce ABirthyearType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTBirthyearType ttbirthyeartypeNode2;
        ttbirthyeartypeNode2 = (TTBirthyearType)nodeArrayList1.get(0);

        ptypeNode1 = new ABirthyearType(ttbirthyeartypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce ADiagnosisType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTDiagnosisType ttdiagnosistypeNode2;
        ttdiagnosistypeNode2 = (TTDiagnosisType)nodeArrayList1.get(0);

        ptypeNode1 = new ADiagnosisType(ttdiagnosistypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce APostalcodeType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTPostalcodeType ttpostalcodetypeNode2;
        ttpostalcodetypeNode2 = (TTPostalcodeType)nodeArrayList1.get(0);

        ptypeNode1 = new APostalcodeType(ttpostalcodetypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AYearsType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTYearsType ttyearstypeNode2;
        ttyearstypeNode2 = (TTYearsType)nodeArrayList1.get(0);

        ptypeNode1 = new AYearsType(ttyearstypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AMonthsType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTMonthsType ttmonthstypeNode2;
        ttmonthstypeNode2 = (TTMonthsType)nodeArrayList1.get(0);

        ptypeNode1 = new AMonthsType(ttmonthstypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ADaysType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTDaysType ttdaystypeNode2;
        ttdaystypeNode2 = (TTDaysType)nodeArrayList1.get(0);

        ptypeNode1 = new ADaysType(ttdaystypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ADateType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTDateType ttdatetypeNode2;
        ttdatetypeNode2 = (TTDateType)nodeArrayList1.get(0);

        ptypeNode1 = new ADateType(ttdatetypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AEventType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTEventType tteventtypeNode2;
        tteventtypeNode2 = (TTEventType)nodeArrayList1.get(0);

        ptypeNode1 = new AEventType(tteventtypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ASequenceType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTSequenceType ttsequencetypeNode2;
        ttsequencetypeNode2 = (TTSequenceType)nodeArrayList1.get(0);

        ptypeNode1 = new ASequenceType(ttsequencetypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ADependencies */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDependencies pdependenciesNode1;
        {
            // Block
        TTUse ttuseNode2;
        PDependenciesList pdependencieslistNode3;
        ttuseNode2 = (TTUse)nodeArrayList1.get(0);
        pdependencieslistNode3 = (PDependenciesList)nodeArrayList2.get(0);

        pdependenciesNode1 = new ADependencies(ttuseNode2, pdependencieslistNode3);
        }
	nodeList.add(pdependenciesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAdependencieslist1DependenciesList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDependenciesList pdependencieslistNode1;
        {
            // Block
        TTGroupFile ttgroupfileNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        ttgroupfileNode2 = (TTGroupFile)nodeArrayList1.get(0);

        pdependencieslistNode1 = new ADependenciesList(ttgroupfileNode2, null);
        }
	nodeList.add(pdependencieslistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAdependencieslist2DependenciesList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDependenciesList pdependencieslistNode1;
        {
            // Block
        TTGroupFile ttgroupfileNode2;
        PDependenciesTail pdependenciestailNode3;
        ttgroupfileNode2 = (TTGroupFile)nodeArrayList1.get(0);
        pdependenciestailNode3 = (PDependenciesTail)nodeArrayList2.get(0);

        pdependencieslistNode1 = new ADependenciesList(ttgroupfileNode2, pdependenciestailNode3);
        }
	nodeList.add(pdependencieslistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ADependenciesTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDependenciesTail pdependenciestailNode1;
        {
            // Block
        TComma tcommaNode2;
        PDependenciesList pdependencieslistNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pdependencieslistNode3 = (PDependenciesList)nodeArrayList2.get(0);

        pdependenciestailNode1 = new ADependenciesTail(tcommaNode2, pdependencieslistNode3);
        }
	nodeList.add(pdependenciestailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ATerminal$Dependencies */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PDependencies pdependenciesNode1;
        pdependenciesNode1 = (PDependencies)nodeArrayList1.get(0);
	if(pdependenciesNode1 != null)
	{
	  listNode2.add(pdependenciesNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ANonTerminal$Dependencies */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PDependencies pdependenciesNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdependenciesNode2 = (PDependencies)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdependenciesNode2 != null)
	{
	  listNode3.add(pdependenciesNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {41, SHIFT, 4}, },
			{{-1, ERROR, 2}, {43, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {36, SHIFT, 5}, },
			{{-1, ERROR, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {33, SHIFT, 14}, {34, SHIFT, 15}, {35, SHIFT, 16}, {37, SHIFT, 17}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 17}, {42, SHIFT, 20}, },
			{{-1, ERROR, 18}, {37, SHIFT, 21}, },
			{{-1, ERROR, 19}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 1}, {5, SHIFT, 23}, },
			{{-1, ERROR, 21}, {42, SHIFT, 26}, },
			{{-1, REDUCE, 5}, {38, SHIFT, 27}, },
			{{-1, ERROR, 23}, {39, SHIFT, 29}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 3}, {5, SHIFT, 23}, },
			{{-1, REDUCE, 2}, {5, SHIFT, 23}, },
			{{-1, ERROR, 27}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {33, SHIFT, 14}, {34, SHIFT, 15}, {35, SHIFT, 16}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 20}, {38, SHIFT, 34}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 4}, {5, SHIFT, 23}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 34}, {39, SHIFT, 29}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 18}, {27, 33}, },
			{{-1, 28}, },
			{{-1, 19}, },
			{{-1, 24}, {25, 31}, {32, 31}, },
			{{-1, 30}, {34, 36}, },
			{{-1, 35}, },
			{{-1, 25}, {26, 32}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'script'",
			"expecting: t script name",
			"expecting: EOF",
			"expecting: '('",
			"expecting: 'Id', 'Sex', 'Birthyear', 'Diagnosis', 'PostalCode', 'Years', 'Months', 'Days', 'Dates', 'Event', 'Sequence', ')'",
			"expecting: t identifier",
			"expecting: t doc comment",
			"expecting: ')'",
			"expecting: 'use', EOF",
			"expecting: ')', ','",
			"expecting: t group file",
			"expecting: 'Id', 'Sex', 'Birthyear', 'Diagnosis', 'PostalCode', 'Years', 'Months', 'Days', 'Dates', 'Event', 'Sequence'",
			"expecting: 'use', ',', EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 5, 8, 6, 9, 10, 8, 8, 8, 11, 7, 12, 8, 8, 8, 7, 10, 8, 8, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
